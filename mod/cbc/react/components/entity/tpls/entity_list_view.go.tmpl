{{$generator:=.}}
{{$node:=.EntNode}}

import {
  Button,
  Table,
  Thead,
  Tbody,
  Tfoot,
  Tr,
  Th,
  Td,
  TableCaption,
  TableContainer,
  VStack,
  FormControl,
  FormLabel,
  Input,
  Divider,
  Text,
  Center,
  Box,
  Alert,
  AlertIcon,
} from '@chakra-ui/react'

import{ useState, useEffect } from 'react';
import {Client} from "cdb/client/Client";
import {Config} from "Config";

function {{$node.Name}}List(){
  const [records, setRecords] = useState([])
  const [loading, setLoading] = useState(false)

  useEffect(
    ()=>{
      setLoading(true);
      (new Client()).{{$node.Name}}().list({page:0}).then((data)=>{setLoading(false)});
    },
    [],
  )

  return (
    <>
    <TableViewer records={records}/>
    {loading ? 
    (<Alert status='warning'>
    <AlertIcon />
    Loading data... 
    </Alert>) :
       null
    }
    </>
  )
}

function TableViewer({records=[]}){
  const [hideForm,setHideForm] = useState(true)
  const recordItems = records.map(record=>
    <Tr>
        {{range $node.Fields}}
          <Td>record["{{.Name}}"]</Td>
        {{end}}
    </Tr>
  )

  return (
  <>
    <Button onClick={()=>{setHideForm(!hideForm)}}>Add a {{$node.Name}}</Button>
    <Form hidden={hideForm}/>

    <Divider />

    <Box mt='10'>
      <Center>
        <Text>{{$node.Name}} List</Text>
      </Center>
    </Box>

    <TableContainer>
      <Table>
        <Thead>
          <Tr>
            {{range $node.Fields}}
            {{$field:=.}}
            <Th>{{$field.Name}}</Th>
            {{end}}
          </Tr>
        </Thead>

        <Tbody>
          {recordItems}
        </Tbody>
      </Table>
      
      
    </TableContainer>
  </>
  )
}

function Form({hidden}){
  if (hidden){
    return null
  }
  return (
      <>
      {{range $node.Fields}}
      {{$field:=.}}
      <FormLabel>{{$field.Name}}</FormLabel>
      <Input />
      {{end}}
      <Button onClick={()=>{

      }}>
        Submit
      </Button>
      </>
  )
}

export{
  {{$node.Name}}List
}
